@page "/"
@model IndexModel
@{
    ViewData["Title"] = "Top Ten";
}

@using AtpCore.Components
@*@inject Services.PlayerInfo PlayerBiosData*@

@section Scripts {

    <script type="text/javascript">

        let checkboxValues = JSON.parse(getCookieValue('favorite-players')) || {};

        //Add favorites to cookie
        function TestMethod(sender, args) {

            const $checkboxes = $('input[type="checkbox"]');
            const expireDate = new Date(new Date().setFullYear(new Date().getFullYear() + 1));

            $checkboxes.on("change", function () {
                $checkboxes.each(function () {
                    checkboxValues[this.value] = this.checked;
                });
                document.cookie = `favorite-players=${JSON.stringify(checkboxValues)}; expires=${expireDate}; path=/`;
            });
        }

        function getCookieValue(name) {
            let nameString = name + "=";
            const value = document.cookie.split(";").filter(item => {
                return item.includes(nameString);
            })
            if (value != "") {
                console.log(value[0].substring(nameString.length, value[0].length));
                return value[0].substring(nameString.length, value[0].length);
            }
            return false;
        }

        //Check favorites on page load
        $.each(checkboxValues, function (key, value) {
            $('input[type="checkbox"][value="' + key + '"]').prop('checked', value);
        });

        function togglePlayerInfo(element) {
            $(element).toggleClass("additional-row-td");
        }


    </script>
}


@using System;
@using Newtonsoft.Json;
@using System.Net.Http;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using System.Collections.Generic;
@using System.Net.Http.Json;


@functions {

    //private List<string> FavoritePlayers = new List<string>();

    //public IActionResult WriteCookie(string player)
    //{
    //    //string player = e.ToString();
    //    //if (FavoritePlayers is null)

    //    if (!FavoritePlayers.Contains(player))
    //    {
    //        FavoritePlayers.Add(player);
    //    }
    //    else
    //    {
    //        FavoritePlayers.Remove(player);
    //    }

    //    CookieOptions options = new CookieOptions();
    //    options.Expires = DateTime.Now.AddDays(365);
    //    Response.Cookies.Append("favorite-players", JsonConvert.SerializeObject(FavoritePlayers), options);

    //}

    public List<PlayerBiography> PlayerBiography { get; set; }
    public string PlayerId { get; set; }

    private async Task<IActionResult> PlayerContent(string PlayerId)
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("https://app.atptour.com/");

        // Get data from JSON HttpContent with ReadFromJsonAsync
        var request = new HttpRequestMessage(HttpMethod.Get, "api/gateway/players.PlayerProfileBio?playerid=D643");
        using var response = await httpClient.SendAsync(request);

        List<PlayerBiography> playerContent = new List<PlayerBiography>();

        if (response.IsSuccessStatusCode)
        {
            var profiles = response.Content.ReadFromJsonAsync<PlayerBiography>();

            //foreach (PlayerBiography player in (profiles.).Where(p => p.PlayerId == PlayerId))
            //{
            //    playerContent.Add(player);
            //}
        }

        PlayerBiography = playerContent;

        return Page();
    }
}



<div class="row" id="content">
    <h1>@ViewData["players"]</h1>

    <table class="table table-striped border">
        <tr class="table-secondary text-center">
            <th>
                @Html.DisplayNameFor(m => m.PlayerList[0].Rank)
            </th>
            <th>
                Player
            </th>
            <th>
                @Html.DisplayNameFor(m => m.PlayerList[0].Points)
            </th>
            <th>
                Previous Rank
            </th>
            <th>
                Age
            </th>
            <th>
                Country
            </th>
            <th>
                Add to Favorites
            </th>
        </tr>

        @foreach (var item in Model.PlayerList)
        {
            <tr class="text-center">
                <td class="player-rank">
                    @Html.DisplayFor(modelItem => item.Rank)<br />
                    <a class="player-bio" style="font-size: 0.35em" role="button" data-toggle="collapse" href="#@($"{item.PlayerId}Accordian")" onclick="togglePlayerInfo('@($"#{item.PlayerId}Row")')" aria-controls="@($"{item.PlayerId}Accordian")" aria-expanded="false">Info</a>
                </td>
                <td class="player-name">
                    <img width="30%" src="https://www.atptour.com/@(item.PlayerHeadshotImageCmsUrl)" alt="@item.FirstName @item.LastName" /><br />
                    @Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)<br />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Points)<br />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PrevRank)<br />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AgeAtRankDate)<br />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CountryName)<br />
                </td>
                <td>
                    @*<input type="checkbox" onclick="TestMethod()" value="@item.FirstName@item.LastName" name="favorite" /><br />*@
                    @*<input type="checkbox" onclick="@Model.WriteCookie(this.)" value="@item.FirstName@item.LastName" name="favorite" /><br />*@
                    <input type="checkbox" onclick="TestMethod()" value="@item.FirstName@item.LastName" name="favorite" />
                </td>
                @*<td>
                        <input type="hidden" name="PlayerId" id="PlayerId@item.FirstName@item.LastName" value="@Html.DisplayFor(modelItem => item.PlayerId)" /><br />
                    </td>*@
            </tr>
            <tr>
                <td id="@($"{item.PlayerId}Row")" class="additional-row-td" colspan="7">
                    @*@(await Html.RenderComponentAsync<SectionComponent>(RenderMode.ServerPrerendered, new { SectionName = "body" }))*@
                    <div id="@($"{item.PlayerId}Accordian")" class="collapse">
                        @*<component type="typeof(MyProject.Views.Home.Test)"
        render-mode="ServerPrerendered"
        param-Name="@Model.TestName" />*@
                        @*@PlayerContent*@

                        @*<PlayerBio PlayerId="@item.PlayerId" />
        <PlayerInfo />*@
                        @*@(await Html.RenderComponentAsync<Pl>(RenderMode.ServerPrerendered))*@
                        @*@(await Html.RenderComponentAsync<PlayerBio>(new {string PlayerId = @item.PlayerId }))*@
                        @*@(await Html.RenderComponentAsync<PlayerBio>(RenderMode.ServerPrerendered, new { PlayerId = @item.PlayerId }))*@

                        @await Component.InvokeAsync("Player", new { PlayerId = @item.PlayerId })

                    </div>
                </td>
            </tr>
        }
    </table>
</div>



